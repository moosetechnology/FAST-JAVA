"
I parse a java method string and convert it into a FASTJava model.

API:

JavaSmaCCProgramNodeImporterVisitor parseCodeMethodString: 'TheString'.

A stack of created entities (used to set the #parentNode) is created by cloning the visitor and calling the clone on child nodes
"
Class {
	#name : 'JavaSmaCCProgramNodeImporterVisitor',
	#superclass : 'JavaProgramNodeVisitor',
	#instVars : [
		'model',
		'currentFASTEntity',
		'parentFASTVisitor',
		'withComments',
		'parser'
	],
	#classInstVars : [
		'hello'
	],
	#category : 'FAST-Java-SmaCC-Importer',
	#package : 'FAST-Java-SmaCC-Importer'
}

{ #category : 'parsing' }
JavaSmaCCProgramNodeImporterVisitor class >> parseCodeMethodString: aCodeString [
	^ self new parseCodeMethodString: aCodeString
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> addToModel: anEntity [
	self model silentlyAdd: anEntity.
	^ anEntity
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> attach: aFastComment [
	(aFastComment isBlockComment
		ifTrue: [ self closestNextNode: aFastComment ]
		ifFalse:  [ self closestPreviousNode: aFastComment ])
	ifNotNil: [ :node | aFastComment container: node ]
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> attachComments: aCodeString [


	parser scanner comments do: [ :pos |
		| fastComment |
		fastComment := self
			               createComment: aCodeString
			               from: pos first
			               to: pos second.
		self attach: fastComment ]
]

{ #category : 'copying' }
JavaSmaCCProgramNodeImporterVisitor >> clone [
	^ self class new
			model: self model ;
			parentFASTVisitor: self ; 
			yourself.
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> closestNextNode: aFastComment [
	^self closestNodeTo: aFastComment relation: #>
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> closestNodeTo: aFastComment relation: comparator [
	| closest |
	closest := nil.
	aFastComment mooseModel entities do: [ :node |
		(self compare: node to: aFastComment comparator: comparator)
		ifTrue: [
			closest
				ifNil: [ closest := node ]
				ifNotNil: [ (self compare: closest to: node comparator: comparator)
					ifTrue: [ closest := node ]
				]
		]
	].
	^closest
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> closestPreviousNode: aFastComment [
	^self closestNodeTo: aFastComment relation: #<
]

{ #category : 'private - comments' }
JavaSmaCCProgramNodeImporterVisitor >> compare: node1 to: node2 comparator: comparator [
	^node1 startPos perform: comparator with: node2 startPos
]

{ #category : 'creating' }
JavaSmaCCProgramNodeImporterVisitor >> create: anEntity from: aNodeEntity [
	currentFASTEntity := self addToModel: anEntity new.
	self setStartEndPos: aNodeEntity.
	^ currentFASTEntity
]

{ #category : 'creating' }
JavaSmaCCProgramNodeImporterVisitor >> createComment: aCodeString from: start to: end [
	| comment |
	comment := FASTJavaComment new
		content: (aCodeString copyFrom: start to: end) ;
		startPos: start ;
		endPos: end ;
		yourself.
	
	self addToModel: comment.
	^comment
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> createTypeName: aName [
	"I am a helper for visitNew"

	| classTypeExpression |
	classTypeExpression := self addToModel: FASTJavaClassTypeExpression new.
	currentFASTEntity := classTypeExpression.
	self setStartEndPos: aName.
	currentFASTEntity
		typeName:
			((self addToModel: FASTJavaTypeName new)
				name: aName value;
				yourself).
	currentFASTEntity := currentFASTEntity typeName.
	self setStartEndPos: aName.
	^ classTypeExpression
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> currentFASTEntity [
	^ currentFASTEntity 
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> initialize [
	super initialize.
	model := FASTJavaModel new.
	withComments := false
]

{ #category : 'creating' }
JavaSmaCCProgramNodeImporterVisitor >> isOutsideTypeDeclaration [

	({ FASTJavaClassDeclaration . FASTJavaInterfaceDeclaration . FASTJavaEnumDeclaration . FASTJavaMethodEntity }
		includes: currentFASTEntity class )
		ifTrue: [ ^ false ].

	^self parentFASTVisitor
		ifNil: [ true ]
		ifNotNil: [ self parentFASTVisitor isOutsideTypeDeclaration ]
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> model [
	^ model
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> model: aModel [
	model := aModel
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> parentFASTEntity [
	
	^ parentFASTVisitor currentFASTEntity
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> parentFASTVisitor [
	
	^ parentFASTVisitor
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> parentFASTVisitor: anObject [
	
	parentFASTVisitor := anObject
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> parseCodeMethodString: aCodeString [

	| ast |
	parser := JavaParser
		          createParserOnStream: (ReadStream on: aCodeString)
		          startingAt:
		          JavaParser
			          startingStateForclass_or_interface_body_declaration.

	[
	ast := parser parse.
	(ast isKindOf: SmaCCParseNode) ifTrue: [
		ast completeSource: aCodeString ] ]
		on: Error
		do: [ :err |
			('SmaCC Err parsing: ' , String crlf , aCodeString) record.
			err signal ].

	[ (self accept: ast) source: ast completeSource asString ]
		on: Error
		do: [ :err |
			('FAST Err parsing: ' , String crlf , aCodeString) record.
			err signal ].

	withComments ifTrue: [ self attachComments: aCodeString ].

	^ self model
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> parseCodeString: aCodeString [

	| ast |
	parser := JavaParser on: (ReadStream on: aCodeString).

	[ ast := parser parse. ast completeSource: aCodeString]
		on: Error
		do: [ :err |
			('SmaCC Err parsing: ' , String crlf , aCodeString) record.
			err signal ].
	[
	self accept: ast.
	((self model allWithSubTypesOfAny: {
			  FASTJavaClassDeclaration.
			  FASTJavaInterfaceDeclaration.
			  FASTJavaEnumDeclaration }) detect: [ :classDeclaration |
		 classDeclaration parentNode isNil ]) source:
		ast completeSource asString ]
		on: Error
		do: [ :err |
			('FAST Err parsing: ' , String crlf , aCodeString) record.
			err signal ].

	withComments ifTrue: [ self attachComments: aCodeString ].

	^ self model
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> setStartEndPos: aNodeEntity [
	currentFASTEntity startPos: aNodeEntity startPosition.
	currentFASTEntity endPos: aNodeEntity stopPosition
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitAbstractMethodDeclaration: anAbstractMethodDeclaration [

	currentFASTEntity := (self create: FASTJavaMethodEntity from: anAbstractMethodDeclaration)
		name: anAbstractMethodDeclaration declarator name value;
		yourself.

	anAbstractMethodDeclaration declarator parameters do: [ :parameter | 
		currentFASTEntity addParameter: (self clone accept: parameter) ].
	anAbstractMethodDeclaration modifiers do: [ :modifier | 
		currentFASTEntity addModifier: (self clone accept: modifier) ].
	currentFASTEntity type: (self clone accept: anAbstractMethodDeclaration type).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitAnnotation: anAnnotation [
	self create: FASTJavaAnnotation from: anAnnotation.
	currentFASTEntity name: anAnnotation name name value.

	anAnnotation values do: [ :expression |
		currentFASTEntity addElement: (self clone accept: expression) ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitArrayAccess: anArrayAccess [
	currentFASTEntity := self addToModel: FASTJavaArrayAccess new.
	self setStartEndPos: anArrayAccess.
	currentFASTEntity array: (self clone accept: anArrayAccess array).
	currentFASTEntity
		expression: (self clone accept: anArrayAccess expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitArrayInitializer: anArrayInitializer [
	currentFASTEntity := self create: FASTJavaArrayInitializer from: anArrayInitializer.
	anArrayInitializer initializers do: [ :initializer | currentFASTEntity initializers add: (self clone accept: initializer) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitArrayType: anArrayType [

	currentFASTEntity := self addToModel:
		                     (FASTJavaArrayTypeExpression new
			                      baseType:
				                      (self clone accept: anArrayType baseType);
			                      yourself).
	currentFASTEntity
		startPos: anArrayType startPosition;
		endPos: (anArrayType rightBrackets at: 1) stopPosition.

	"Arrays with more than one dimension are nested"
	2 to: anArrayType leftBrackets size do: [ :index | 
		currentFASTEntity := self addToModel:
			                     (FASTJavaArrayTypeExpression new
				                      baseType: currentFASTEntity;
				                      yourself).
		currentFASTEntity
			startPos: anArrayType startPosition;
			endPos: (anArrayType rightBrackets at: index) stopPosition ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitArrayVariableName: anArrayVariableName [
	^ self accept: anArrayVariableName variable
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitAssertStatement: anAssertStatement [
	currentFASTEntity := self addToModel: FASTJavaAssertStatement new.
	self setStartEndPos: anAssertStatement.
	currentFASTEntity condition: (self clone accept: anAssertStatement testExpression).
	currentFASTEntity message: (self clone accept: anAssertStatement messageExpression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitAssignment: anAssignmentExpression [
	currentFASTEntity := self create: FASTJavaAssignmentExpression from: anAssignmentExpression.
	currentFASTEntity operator: anAssignmentExpression op value.
	currentFASTEntity variable: (self clone accept: anAssignmentExpression variable).
	currentFASTEntity expression: (self clone accept: anAssignmentExpression value).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitBinaryExpression: aBinaryExpression [

	currentFASTEntity := self addToModel: FASTJavaInfixOperation new.
	self setStartEndPos: aBinaryExpression.
	currentFASTEntity leftOperand:
		(self clone accept: aBinaryExpression leftExpression).
	currentFASTEntity rightOperand:
		(self clone accept: aBinaryExpression rightExpression).
	currentFASTEntity operator: aBinaryExpression op value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitBlock: aBlock [
	currentFASTEntity := self addToModel: FASTJavaStatementBlock new.
	self setStartEndPos: aBlock.
	aBlock statements
		do: [ :each | currentFASTEntity statements add: (self clone accept: each) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitBooleanLiteral: aBooleanLiteral [
	currentFASTEntity := self
		addToModel:
			(FASTJavaBooleanLiteral new
				primitiveValue: aBooleanLiteral token value;
				yourself).
	self setStartEndPos: aBooleanLiteral.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitBooleanType: aBooleanType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaBooleanTypeExpression new
				name: aBooleanType token value;
				yourself).
	self setStartEndPos: aBooleanType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitBreakStatement: aBreakStatement [
	currentFASTEntity := self addToModel: FASTJavaBreakStatement new.
	self setStartEndPos: aBreakStatement.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitByteType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaByteTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitCastExpression: aCastExpression [
	currentFASTEntity := self addToModel: FASTJavaCastExpression new.
	self setStartEndPos: aCastExpression.
	currentFASTEntity type: (self clone accept: aCastExpression type).
	currentFASTEntity
		expression: (self clone accept: aCastExpression expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitCatchClause: aCatchClause [
	currentFASTEntity := self addToModel: FASTJavaCatchPartStatement new.
	self setStartEndPos: aCatchClause.
	self clone accept: aCatchClause parameter.
	currentFASTEntity body: (self clone accept: aCatchClause block).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitCatchParameter: aCatchParameter [
	| param |
	param := self visitName: aCatchParameter variable.
	self parentFASTEntity parameter: param.
	aCatchParameter types do: [ :catchedType |
		self parentFASTEntity addCatchedType: (self clone accept: catchedType)
	].
	^ param
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitCharType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaCharTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitCharacterLiteral: aCharacterLiteral [
	| tokenValue |
	tokenValue := aCharacterLiteral token value.

	currentFASTEntity := self create: FASTJavaCharacterLiteral from: aCharacterLiteral.
	currentFASTEntity primitiveValue: (tokenValue copyFrom: 2 to: (tokenValue size - 1)).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitClassDeclaration: aClassDeclaration [
	self create: FASTJavaClassDeclaration from: aClassDeclaration.
	currentFASTEntity name: aClassDeclaration name value.
	
	aClassDeclaration modifiers do: [ :modifier | currentFASTEntity addModifier: (self clone accept: modifier) ].
	aClassDeclaration superclass ifNotNil: [ :superclass | currentFASTEntity superclass: (self clone accept: superclass) ].
	aClassDeclaration interfaces do: [ :interface | currentFASTEntity addInterface: (self clone accept: interface) ].
	aClassDeclaration declarations do: [ :declaration | currentFASTEntity addDeclaration: (self clone accept: declaration) ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitClassExpression: aClassExpression [
	currentFASTEntity := self addToModel: FASTJavaClassProperty new.
	self setStartEndPos: aClassExpression.

	currentFASTEntity type: (self clone accept: aClassExpression type).
	currentFASTEntity fieldName: aClassExpression classToken value.

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitClassType: aClassType [
	currentFASTEntity := self addToModel: FASTJavaClassTypeExpression new.
	self setStartEndPos: aClassType.
	currentFASTEntity typeName: (self clone accept: aClassType name).

	aClassType name arguments do: [ :typeArgument |
		currentFASTEntity addArgument: (self clone accept: typeArgument)
	].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitConditionalExpression: aConditionalExpression [
	currentFASTEntity := self
		addToModel: FASTJavaConditionalExpression new.
	self setStartEndPos: aConditionalExpression.
	currentFASTEntity
		condition: (self clone accept: aConditionalExpression testExpression).
	currentFASTEntity
		thenPart: (self clone accept: aConditionalExpression trueExpression).
	aConditionalExpression falseExpression
		ifNotNil: [ currentFASTEntity
				elsePart: (self clone accept: aConditionalExpression falseExpression) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitContinueStatement: aContinueStatement [
	currentFASTEntity := self addToModel: FASTJavaContinueStatement new.
	self setStartEndPos: aContinueStatement.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitDeclaration: aConstructorDeclaration [
	currentFASTEntity := (self create: FASTJavaMethodEntity from: aConstructorDeclaration)
		name: aConstructorDeclaration name name value;
		yourself.
	self setStartEndPos: aConstructorDeclaration.
	aConstructorDeclaration parameters do: [ :parameter | currentFASTEntity addParameter: (self clone accept: parameter) ].
	currentFASTEntity statementBlock: (self clone accept: aConstructorDeclaration body).
	aConstructorDeclaration modifiers do: [ :modifier | currentFASTEntity addModifier: (self clone accept: modifier) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitDoWhileStatement: aDoWhileStatement [
	currentFASTEntity := self addToModel: FASTJavaDoWhileStatement new.
	self setStartEndPos: aDoWhileStatement.
	currentFASTEntity
		condition: (self clone accept: aDoWhileStatement expression).
	currentFASTEntity
		body: (self clone accept: aDoWhileStatement statement).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitDoubleType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaDoubleTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitElementArrayInitializer: anElementArrayInitializer [

	currentFASTEntity := self create: FASTJavaArrayAnnotationElement from: anElementArrayInitializer.
	anElementArrayInitializer values do: [ :value |
		currentFASTEntity  addValue: (self clone accept: value) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitElementValuePair: anElementValuePair [
	"'key = value' as argument of an Annotation
	 treat it as an Assignment Expression"

	currentFASTEntity := self create: FASTJavaAssignmentExpression from: anElementValuePair.
	currentFASTEntity variable: (self clone visitVariableName: anElementValuePair).
	currentFASTEntity operator: '='.
	currentFASTEntity expression: (self clone accept: anElementValuePair value).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitEmptyDeclaration: anEmptyDeclaration [
	currentFASTEntity := self addToModel: FASTJavaEmptyMethodDeclaration new.
	self setStartEndPos: anEmptyDeclaration.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitEmptyDimExpression: aToken [
	currentFASTEntity := self
		addToModel: FASTJavaEmptyDimExpression new.
	self setStartEndPos: aToken.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitEmptyStatement: anEmptyStatement [
	currentFASTEntity := self addToModel: FASTJavaStatement new.
	self setStartEndPos: anEmptyStatement.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitEnumConstant: anEnumConstant [
	"treat EnumConstant as a Field"

	currentFASTEntity := self addToModel: FASTJavaEnumConstant new.
	self setStartEndPos: anEnumConstant.
	currentFASTEntity
			name: anEnumConstant name value.

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitEnumDeclaration: anEnumDeclaration [

	self create: FASTJavaEnumDeclaration from: anEnumDeclaration.
	currentFASTEntity name: anEnumDeclaration name value.

	anEnumDeclaration constants do: [ :constant | currentFASTEntity addConstant: (self clone accept: constant) ].
	anEnumDeclaration declarations do: [ :declaration | currentFASTEntity addDeclaration: (self clone accept: declaration) ].
	anEnumDeclaration interfaces do: [ :interface | currentFASTEntity addInterface: (self clone accept: interface) ].
	anEnumDeclaration modifiers do: [ :modifier | currentFASTEntity addModifier: (self clone accept: modifier) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitExpressionStatement: anExpressionStatement [
	currentFASTEntity := self addToModel: FASTJavaExpressionStatement new.
	self setStartEndPos: anExpressionStatement.
	currentFASTEntity
		expression: (self clone accept: anExpressionStatement expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitFieldAccess: aFieldAccess [
	currentFASTEntity := self addToModel: FASTJavaFieldAccess new.
	self setStartEndPos: aFieldAccess.
	aFieldAccess receiver
		ifNotNil: [ :receiver | currentFASTEntity receiver: (self clone accept: receiver) ]
		ifNil: [
			aFieldAccess superToken
				ifNotNil: [ currentFASTEntity receiver: (self clone visitSuperMemberAcessor: aFieldAccess) ]
		].
	currentFASTEntity fieldName: aFieldAccess name value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitFieldDeclaration: aFieldDeclaration [
	currentFASTEntity := self addToModel: FASTJavaVarDeclStatement new.
	self setStartEndPos: aFieldDeclaration.
	aFieldDeclaration type ifNotNil: [ currentFASTEntity type: (self clone accept: aFieldDeclaration type) ].
	aFieldDeclaration variableDeclarations do: [ :each | currentFASTEntity declarators add: (self clone accept: each) ].
		aFieldDeclaration modifiers do: [ :modifier | currentFASTEntity addModifier: (self clone accept: modifier) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitFinallyClause: aFinallyClause [
	^self accept: aFinallyClause block
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitFloatLiteral: aFloatLiteral [
	currentFASTEntity := self
		addToModel:
			(FASTJavaFloatLiteral new
				primitiveValue: aFloatLiteral token value;
				yourself).
		self setStartEndPos: aFloatLiteral.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitFloatType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaFloatTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitForEachStatement: aForEachStatement [
	currentFASTEntity := self addToModel: FASTJavaForEachStatement new.
	self setStartEndPos: aForEachStatement.
	currentFASTEntity body:
		(self clone accept: aForEachStatement statement).
	currentFASTEntity fieldname:
		(self clone visitIdentifier: aForEachStatement name).
	currentFASTEntity type: (self clone accept: aForEachStatement type).
	currentFASTEntity list:
		(self clone accept: aForEachStatement expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitForStatement: aForStatement [
	currentFASTEntity := self addToModel: FASTJavaForStatement new.
	self setStartEndPos: aForStatement.
	aForStatement test
		ifNotNil: [ :test | currentFASTEntity condition: (self clone accept: test) ].
	aForStatement _update
		ifNotNil:
			[ :_update | currentFASTEntity incrementor: (self clone accept: _update) ].
	aForStatement initial
		ifNotNil:
			[ :initial | currentFASTEntity initializer: (self clone accept: initial) ].
	aForStatement statement
		ifNotNil:
			[ :statement | currentFASTEntity body: (self clone accept: statement) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitIdentifier: aNameNode [
	currentFASTEntity := self addToModel: FASTJavaIdentifier new.
	self setStartEndPos: aNameNode.
	currentFASTEntity name: aNameNode name value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitIfElseStatement: anIfStatementNode [
	currentFASTEntity := self addToModel: FASTJavaIfStatement new.
	self setStartEndPos: anIfStatementNode.
	currentFASTEntity
		condition: (self clone accept: anIfStatementNode expression).
	currentFASTEntity
		thenPart: (self clone accept: anIfStatementNode trueStatement).
	anIfStatementNode falseStatement
		ifNotNil: [ currentFASTEntity
				elsePart: (self clone accept: anIfStatementNode falseStatement) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitIfStatement: anIfStatementNode [
	currentFASTEntity := self addToModel: FASTJavaIfStatement new.
		self setStartEndPos: anIfStatementNode.
	currentFASTEntity
		condition: (self clone accept: anIfStatementNode expression).
	currentFASTEntity
		thenPart: (self clone accept: anIfStatementNode trueStatement).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitInitializedVariableDeclaration: anInitializedVariableDeclaration [
	currentFASTEntity := self addToModel: FASTJavaVariableDeclarator new.
	self setStartEndPos: anInitializedVariableDeclaration.
	currentFASTEntity
		variable: (self clone accept: anInitializedVariableDeclaration variable).
	currentFASTEntity
		expression: (self clone accept: anInitializedVariableDeclaration initializer).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitInitializer: aInitializer [
	currentFASTEntity := FASTJavaInitializer new.
	self setStartEndPos: aInitializer.
	currentFASTEntity statementBlock: (self clone accept: aInitializer block).
	self addToModel: currentFASTEntity.
	^ currentFASTEntity
]

{ #category : 'generated' }
JavaSmaCCProgramNodeImporterVisitor >> visitInstanceofPatternExpression: anInstanceofPatternExpression [
	"SmaCC gives a single node representing both the instanceof operation and the type pattern.
	FAST splits it into an infix operation with the type pattern as the right operand."

	self
		create: FASTJavaInfixOperation
		from: anInstanceofPatternExpression.
	currentFASTEntity leftOperand:
		(self clone accept: anInstanceofPatternExpression object).
	currentFASTEntity rightOperand:
		((self addToModel: FASTJavaTypePattern new)
			 startPos: anInstanceofPatternExpression type startPosition;
			 endPos: anInstanceofPatternExpression variable stopPosition;
			 type: (self clone accept: anInstanceofPatternExpression type);
			 variable:
				 (self clone accept: anInstanceofPatternExpression variable)).
	currentFASTEntity operator: 'instanceof'.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitIntType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaIntTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitIntegerLiteral: anIntegerLiteral [
	currentFASTEntity := self
		addToModel:
			(FASTJavaIntegerLiteral new
				primitiveValue: anIntegerLiteral token value;
				yourself).
	self setStartEndPos: anIntegerLiteral.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitInterfaceDeclaration: anInterfaceDeclaration [
	self create: FASTJavaInterfaceDeclaration from: anInterfaceDeclaration.
	currentFASTEntity name: anInterfaceDeclaration name value.

	anInterfaceDeclaration modifiers do: [ :modifier | currentFASTEntity addModifier: (self clone accept: modifier) ].
	anInterfaceDeclaration interfaceTypes do: [ :interface | currentFASTEntity addInterface: (self clone accept: interface) ].
	anInterfaceDeclaration declarations do: [ :declaration | currentFASTEntity addDeclaration: (self clone accept: declaration) ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitLabeledStatement: aLabeledStatement [

	currentFASTEntity := self addToModel: (FASTJavaLabeledStatement new
			                      label: aLabeledStatement identifier value;
			                      yourself).
	self setStartEndPos: aLabeledStatement.
	currentFASTEntity labeledStatement:	(self clone accept: aLabeledStatement statement).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitLambdaExpression: aLambdaExpression [
	currentFASTEntity := self
		addToModel: FASTJavaLambdaExpression new.
	self setStartEndPos: aLambdaExpression.
	aLambdaExpression parameters do: [ :parameter | currentFASTEntity addParameter: (self clone accept: parameter) ].
	currentFASTEntity
		expression: (self clone accept: aLambdaExpression value).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitLocalVariableDeclaration: aLocalVariableDeclaration [
	currentFASTEntity := self addToModel: FASTJavaVarDeclStatement new.
	self setStartEndPos: aLocalVariableDeclaration.
	aLocalVariableDeclaration type ifNotNil: [ currentFASTEntity type: (self clone accept: aLocalVariableDeclaration type) ].
	aLocalVariableDeclaration variableDeclarations
		do: [ :each | currentFASTEntity declarators add: (self clone accept: each) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitLocalVariableDeclarationStatement: aLocalVariableDeclarationStatement [
	currentFASTEntity := self addToModel: FASTJavaVarDeclStatement new.
	self setStartEndPos: aLocalVariableDeclarationStatement.

	aLocalVariableDeclarationStatement declaration type ifNotNil: [ :declaredType |
		currentFASTEntity type: (self clone accept: declaredType) ].
	aLocalVariableDeclarationStatement declaration modifiers do: [ :modifier | 
		currentFASTEntity addModifier: (self clone accept: modifier) ].
	aLocalVariableDeclarationStatement declaration variableDeclarations
		do: [ :each | currentFASTEntity declarators add: (self clone accept: each) ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitLongType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaLongTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitMethodDeclaration: aMethodDeclaration [

	| methodBody |
	self create: FASTJavaMethodEntity from: aMethodDeclaration.
	currentFASTEntity name: aMethodDeclaration declarator name value.

	aMethodDeclaration modifiers do: [ :modifier | 
		currentFASTEntity addModifier: (self clone accept: modifier) ].

	aMethodDeclaration type ifNotNil: [ 
		currentFASTEntity type: (self clone accept: aMethodDeclaration type) ].

	aMethodDeclaration typeParameters ifNotNil: [ :typeParameters | 
		typeParameters parameters do: [ :typeParameter | 
			currentFASTEntity addTypeParameter:
				(self clone accept: typeParameter) ] ].

	aMethodDeclaration declarator parameters do: [ :parameter | 
		currentFASTEntity addParameter: (self clone accept: parameter) ].

	aMethodDeclaration throws ifNotNil: [ :throws | 
		throws classTypes do: [ :classType | 
			currentFASTEntity addThrow: (self clone accept: classType) ] ].

	methodBody := self clone accept: aMethodDeclaration body.
	(methodBody isKindOf: JavaEmptyMethodBodyNode) ifFalse: [ 
		currentFASTEntity statementBlock: (self clone accept: methodBody) ].

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitMethodInvocation: aMethodInvocation [
	currentFASTEntity := self addToModel: FASTJavaMethodInvocation new.
	self setStartEndPos: aMethodInvocation.
	aMethodInvocation expressions do: [ :expression | currentFASTEntity addArgument: (self clone accept: expression) ].
	aMethodInvocation receiver
		ifNotNil: [ :receiver | 
			(receiver isMemberOf: JavaNameNode)
				ifTrue: [ "If the element is named. It is more than propably an Identifier and not just an named element. So you pass over the normal rules of the importer"
					currentFASTEntity
						receiver:
							(FASTJavaIdentifier new
								name: receiver name value;
								startPos: receiver startPosition;
								endPos: receiver stopPosition;
								yourself).
					self addToModel: currentFASTEntity receiver ]
				ifFalse: [ currentFASTEntity receiver: (self clone accept: receiver) ] ]
		ifNil: [ aMethodInvocation superToken
				ifNotNil: [ :superToken | 
					currentFASTEntity
						receiver:
							(FASTJavaIdentifier new
								name: superToken value;
								startPos: superToken startPosition;
								endPos: superToken stopPosition;
								yourself).
					self addToModel: currentFASTEntity receiver ] ].
	currentFASTEntity name: aMethodInvocation name value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitMethodReference: aMethodReference [
	currentFASTEntity := self
		addToModel: FASTJavaMethodReference new.
	self setStartEndPos: aMethodReference.
	currentFASTEntity
		receiver: (self clone accept: aMethodReference receiver).
	currentFASTEntity
		name: (aMethodReference name value).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitModifier: aModifier [
	self create: FASTJavaModifier from: aModifier.
	currentFASTEntity token: aModifier token value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitName: aName [

	self isOutsideTypeDeclaration
		ifTrue: [ 
			currentFASTEntity := self addToModel: FASTJavaQualifiedName new.
			self setStartEndPos: aName ]
		ifFalse: [ 
			currentFASTEntity := self
				                     create: FASTJavaVariableExpression
				                     from: aName ].
	currentFASTEntity name: aName name value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitNew: aNewNode [

	currentFASTEntity := self addToModel: FASTJavaNewExpression new.
	self setStartEndPos: aNewNode.
	aNewNode expressions do: [ :expression | 
		currentFASTEntity arguments add: (self clone accept: expression) ].

	aNewNode primary ifNotNil: [ :primary | 
		currentFASTEntity receiver: (self clone accept: primary) ].
	"
in the following 'InnerClass' is considered as a Name in FAST but should be considered as a Type in FASTJava	
public void onClick(ClickEvent event) {
  view.setDisplayView(view.new InnerClass());
}"
	aNewNode type
		ifNotNil: [ 
		currentFASTEntity type: (self clone accept: aNewNode type) ]
		ifNil: [ 
		currentFASTEntity type: (self clone createTypeName: aNewNode name) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitNewArray: aNewArray [
	| dimExprs emptyExprs |
	currentFASTEntity := self addToModel: FASTJavaNewArray new.
		self setStartEndPos: aNewArray.

	currentFASTEntity type: (self clone accept: aNewArray type).
	aNewArray initializer
		ifNotNil: [ :initialize | 
			currentFASTEntity initializer: (self clone accept: initialize) ].

	dimExprs := aNewArray dimExpressions
		collect: [ :dimExpression | self clone accept: dimExpression expression ].
	"for empty dim, no dimExpression is generated but tokens in 'leftBrackets' collection"
	emptyExprs := aNewArray leftBrackets
		collect: [ :emptyDimExpression | self clone visitEmptyDimExpression: emptyDimExpression ].

	"put them in correct order following their startPos"
	currentFASTEntity arguments:
		((dimExprs , emptyExprs) sorted: [ :a :b | a startPos < b startPos ]).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitNewClass: aNewClass [

	currentFASTEntity := self addToModel: FASTJavaNewClassExpression new.
	self setStartEndPos: aNewClass.
	aNewClass expressions do: [ :expression | 
		currentFASTEntity arguments add: (self clone accept: expression) ].
	aNewClass type
		ifNotNil: [ 
		currentFASTEntity type: (self clone accept: aNewClass type) ]
		ifNil: [ 
			currentFASTEntity type: (self clone createTypeName: aNewClass name).
			currentFASTEntity receiver: (self clone accept: aNewClass primary) ].
	aNewClass declarations do: [ :method | 
		currentFASTEntity declarations add: (self clone accept: method) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitNull: aNull [
	currentFASTEntity := self
		addToModel:
			(FASTJavaNullLiteral new
				primitiveValue: aNull token value;
				yourself).
	self setStartEndPos: aNull.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitOuterThis: aFASTJavaOuterThis [
	currentFASTEntity := FASTJavaOuterThis new.
	self setStartEndPos: aFASTJavaOuterThis.
	currentFASTEntity type: (self clone accept: aFASTJavaOuterThis name).
	self addToModel: currentFASTEntity.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPackageDeclaration: aPackageDeclaration [
	currentFASTEntity := self addToModel: FASTJavaPackageDeclaration new.
	self setStartEndPos: aPackageDeclaration.
	currentFASTEntity qualifiedName: (self clone accept: aPackageDeclaration name).
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitParameter: aParameter [
	currentFASTEntity := self addToModel: FASTJavaParameter new.
	self setStartEndPos: aParameter.
	currentFASTEntity variable: (self clone accept: aParameter variable).
	currentFASTEntity type: (self clone accept: aParameter type).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPostDecrementExpression: aPostDecrementExpression [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: aPostDecrementExpression expression).
	currentFASTEntity operator: aPostDecrementExpression minusMinus value.
	currentFASTEntity isPrefixedUnaryExpression: false.
	self setStartEndPos: aPostDecrementExpression.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPostIncrementExpression: aPostIncrementExpression [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: aPostIncrementExpression expression).
	currentFASTEntity operator: aPostIncrementExpression plusPlus value.
	currentFASTEntity isPrefixedUnaryExpression: false.
	self setStartEndPos: aPostIncrementExpression.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPreDecrementExpression: aPreDecrementExpression [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: aPreDecrementExpression expression).
	currentFASTEntity operator: aPreDecrementExpression minusMinus value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: aPreDecrementExpression.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPreIncrementExpression: aPreIncrementExpression [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: aPreIncrementExpression expression).
	currentFASTEntity operator: aPreIncrementExpression plusPlus value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: aPreIncrementExpression.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitPrimitiveType: aPrimitiveType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaPrimitiveTypeExpression new
				name: aPrimitiveType token value;
				yourself).
	self setStartEndPos: aPrimitiveType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitQualifiedName: aQualifiedName [

	self isOutsideTypeDeclaration
		ifTrue: [
			currentFASTEntity := self addToModel: FASTJavaQualifiedName new.
			self setStartEndPos: aQualifiedName.
			currentFASTEntity namespace: (self clone accept: aQualifiedName nspace).
			currentFASTEntity name: aQualifiedName name value ]
		ifFalse: [ 
			currentFASTEntity := self addToModel: FASTJavaClassProperty new.
			self setStartEndPos: aQualifiedName.
			currentFASTEntity type: (self clone accept: aQualifiedName nspace).
			currentFASTEntity fieldName: aQualifiedName name value ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitQualifiedTypeName: aQualifiedTypeName [
	currentFASTEntity := self addToModel: FASTJavaQualifiedTypeName new.
	self setStartEndPos: aQualifiedTypeName.
	currentFASTEntity name: aQualifiedTypeName name value.
	currentFASTEntity namespace: (self clone accept: aQualifiedTypeName nspace).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitReturnStatement: aReturnStatement [
	currentFASTEntity := self create: FASTJavaReturnStatement from: aReturnStatement.

	currentFASTEntity expression: (self clone accept: aReturnStatement expression).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitShortType: aByteType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaShortTypeExpression new
				name: aByteType token value;
				yourself).
	self setStartEndPos: aByteType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSingleTypeImportDeclaration: aSingleTypeImportDeclaration [
	currentFASTEntity := self addToModel: FASTJavaImportDeclaration new.
	self setStartEndPos: aSingleTypeImportDeclaration.
	currentFASTEntity qualifiedName: (self clone accept: aSingleTypeImportDeclaration name).
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitStatementExpressionList: aStatementExpressionList [
	currentFASTEntity := self addToModel: FASTJavaExpressionStatement new.
	self setStartEndPos: aStatementExpressionList.
	aStatementExpressionList expressions
		do:
			[ :expression | currentFASTEntity expression: (self clone accept: expression) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitStaticInitializer: anInitializer [
	self visitInitializer: anInitializer.
	currentFASTEntity isStatic: true.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitStringLiteral: aStringLiteral [
	currentFASTEntity := self
		addToModel:
			(FASTJavaStringLiteral new
				primitiveValue: ((aStringLiteral token value removePrefix: '"') removeSuffix: '"');
				yourself).
	self setStartEndPos: aStringLiteral.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSuperConstructorInvocation: aSuperConstructorInvocation [
	| expressionStatement |
	currentFASTEntity := self addToModel: FASTJavaExpressionStatement new.
	expressionStatement := currentFASTEntity. 
	self setStartEndPos: aSuperConstructorInvocation.
	"we encasulate the call inside a fast expression statement"
	currentFASTEntity expression: (self addToModel: FASTJavaMethodInvocation new).
	currentFASTEntity := currentFASTEntity expression.
	self setStartEndPos: aSuperConstructorInvocation.
	aSuperConstructorInvocation expressions do: [ :expression | currentFASTEntity arguments add: (self clone accept: expression) ].
	currentFASTEntity name: aSuperConstructorInvocation superToken value.
	^ expressionStatement
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSuperMemberAcessor: aFieldAccess [
	currentFASTEntity := self create: FASTJavaVariableExpression from: aFieldAccess superToken.
	currentFASTEntity name: aFieldAccess superToken value.
	^currentFASTEntity 
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSwitchBlockStatementGroup: aSwitchBlockStatementGroup [
	currentFASTEntity := self
		addToModel:
			(aSwitchBlockStatementGroup labels anyOne class = JavaSwitchLabelNode
				ifTrue: [ FASTJavaLabeledCaseStatement new
						label: (self clone accept: aSwitchBlockStatementGroup labels anyOne constants anyOne);
						yourself ]
				ifFalse: [ FASTJavaDefaultCaseStatement new ]).
	self setStartEndPos: aSwitchBlockStatementGroup.
	aSwitchBlockStatementGroup statements do: [ :statement | currentFASTEntity statements add: (self clone accept: statement) ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSwitchStatement: aSwitchStatement [
	currentFASTEntity := self addToModel: FASTJavaSwitchStatement new.
	self setStartEndPos: aSwitchStatement.
	aSwitchStatement block statementGroups do: [ :aStatementGroup |
		 currentFASTEntity cases add: (self clone accept: aStatementGroup) ].
	currentFASTEntity condition: (self clone accept: aSwitchStatement expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitSynchronizedStatement: aSynchronizedStatement [
	currentFASTEntity := self
		addToModel: FASTJavaSynchronizedStatement new.
	self setStartEndPos: aSynchronizedStatement.
	currentFASTEntity
		expression: (self clone accept: aSynchronizedStatement expression).
	currentFASTEntity
		block: (self clone accept: aSynchronizedStatement block).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitThisConstructorInvocation: aThisConstructorInvocation [
	| expressionStatement | 
	currentFASTEntity := self addToModel: FASTJavaExpressionStatement new.
	expressionStatement := currentFASTEntity. 
	self setStartEndPos: aThisConstructorInvocation.
	"we encasulate the call inside a fast expression statement"
	currentFASTEntity expression: (self addToModel: FASTJavaMethodInvocation new).
	currentFASTEntity := currentFASTEntity expression.
	self setStartEndPos: aThisConstructorInvocation.
	aThisConstructorInvocation expressions
		do:
			[ :expression | currentFASTEntity arguments add: (self clone accept: expression) ].
	currentFASTEntity name: aThisConstructorInvocation thisToken value.
	^ expressionStatement
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitThrowStatement: aThrowStatement [
	currentFASTEntity := self addToModel: FASTJavaThrowStatement new.
	self setStartEndPos: aThrowStatement.
	currentFASTEntity expression: (self clone accept: aThrowStatement expression).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitTryStatement: aTryStatement [
	currentFASTEntity := self create: FASTJavaTryCatchStatement from: aTryStatement.

	aTryStatement resources do: [ :tryResource |
		currentFASTEntity addResource: (self clone accept: tryResource)
	].

	currentFASTEntity try: (self clone accept: aTryStatement block).

	aTryStatement catches
		do:
			[ :aCatchBlock | currentFASTEntity addCatch: (self clone accept: aCatchBlock) ].

	currentFASTEntity finally: (self clone accept: aTryStatement finally).

	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitTypeArgument: aTypeArgument [

	self flag: 'Would probably be better to introduce a FASTJavaTypeWildCardParameterExpression'.

	^aTypeArgument questionMark
		ifNil: [  self accept: aTypeArgument type ]
		ifNotNil: [
			currentFASTEntity := self create: FASTJavaTypeParameterExpression  from: aTypeArgument.
			currentFASTEntity
				name: '?' ;
				yourself
		]
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitTypeImportOnDemandDeclaration: aTypeImportOnDemandDeclaration [

	currentFASTEntity := self addToModel: FASTJavaImportDeclaration new.
	self setStartEndPos: aTypeImportOnDemandDeclaration.
	currentFASTEntity
		isOnDemand: true;
		qualifiedName:
			(self clone accept: aTypeImportOnDemandDeclaration name)
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitTypeName: aTypeName [
	currentFASTEntity := self addToModel: FASTJavaTypeName new.
	currentFASTEntity name: aTypeName name value.
	self setStartEndPos: aTypeName.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitTypeParameter: aTypeParameter [
	currentFASTEntity := self addToModel: FASTJavaTypeParameterExpression new.
	self setStartEndPos: aTypeParameter.
	currentFASTEntity name: aTypeParameter name value.
	aTypeParameter types do: [ :type |
		currentFASTEntity addType: (self clone accept: type)
		 ].
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitUnaryAddition: anUnaryAddition [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: anUnaryAddition expression).
	currentFASTEntity operator: anUnaryAddition plus value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: anUnaryAddition.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitUnaryBitInvert: anUnaryBitInvert [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: anUnaryBitInvert expression).
	currentFASTEntity operator: anUnaryBitInvert tilde value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: anUnaryBitInvert.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitUnaryNot: aUnaryNotExpression [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: aUnaryNotExpression expression).
	currentFASTEntity operator: aUnaryNotExpression bang value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: aUnaryNotExpression.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitUnarySubtraction: anUnarySubtraction [
	currentFASTEntity := self addToModel: FASTJavaUnaryExpression new.
	currentFASTEntity
		expression: (self clone accept: anUnarySubtraction expression).
	currentFASTEntity operator: anUnarySubtraction minus value.
	currentFASTEntity isPrefixedUnaryExpression: true.
	self setStartEndPos: anUnarySubtraction.
	^ currentFASTEntity
]

{ #category : 'generated' }
JavaSmaCCProgramNodeImporterVisitor >> visitVariableArgumentParameter: aVariableArgumentParameter [
	self visitParameter: aVariableArgumentParameter.
	currentFASTEntity hasVariableArguments: true.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitVariableDeclaration: aVariableDeclaration [
	currentFASTEntity := self addToModel: FASTJavaVariableDeclarator new.
	self setStartEndPos: aVariableDeclaration.
	currentFASTEntity
		variable: (self clone accept: aVariableDeclaration variable).
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitVariableName: aVariableName [
	currentFASTEntity := self create: FASTJavaVariableExpression from: aVariableName.
	currentFASTEntity name: aVariableName name value.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitVoidType: aVoidType [
	currentFASTEntity := self
		addToModel:
			(FASTJavaVoidTypeExpression new
				name: aVoidType voidToken value;
				yourself).
	self setStartEndPos: aVoidType.
	^ currentFASTEntity
]

{ #category : 'visitor' }
JavaSmaCCProgramNodeImporterVisitor >> visitWhileStatement: aWhileStatementNode [
	currentFASTEntity := self addToModel: FASTJavaWhileStatement new.
	self setStartEndPos: aWhileStatementNode.
	currentFASTEntity
		condition: (self clone accept: aWhileStatementNode expression).
	currentFASTEntity
		body: (self clone accept: aWhileStatementNode statement).
	^ currentFASTEntity
]

{ #category : 'initialization' }
JavaSmaCCProgramNodeImporterVisitor >> withComments [
	withComments := true
]
